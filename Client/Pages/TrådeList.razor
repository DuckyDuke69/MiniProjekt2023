@page "/trådelist"
@using global::Shared;
@inject ApiService ApiService

<link rel="stylesheet" href="TrådeList.razor.css" />
<body>
    <h1>Tråddit</h1>

    <section class="thread-creation">
        <h2>Create a New Thread</h2>
        <!-- Lav et ny thread -->
        <EditForm Model="newTråd" OnValidSubmit="HandleValidSubmitTråd">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="Tråde_Overskrift">Overskrift</label>
                <InputText id="Tråde_Overskrift" @bind-Value="newTråd.Tråde_Overskrift" class="form-control" />
            </div>

            <div class="form-group">
                <label for="Tekst">Tekst</label>
                <InputText id="Tekst" @bind-Value="newTråd.Tekst" class="form-control" />
            </div>

            <div class="form-group">
                <label for="Brugernavn">Forfatternavn</label>
                <InputText id="Brugernavn" @bind-Value="newTråd.bruger.Brugernavn" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Opret Tråd</button>
        </EditForm>
    </section>

    <ul class="thread-list">
        @if (trådes != null)
        {
            @foreach (var tråd in trådes)
            {
                <li class="thread-card">
                    <h2 class="thread-title">@tråd.Tråde_Overskrift</h2>
                    <div class="thread-info">
                        <p>Trådens ID: @tråd.TrådeId</p>
                        <p><strong>Tekst:</strong> @tråd.Tekst</p>
                        <p><strong>Skrevet af:</strong> @tråd.bruger.Brugernavn</p>
                        <p><strong>Dato:</strong> @tråd.Dato</p>
                        <p><strong>Tråd Votes:</strong> @(tråd.Upvote - tråd.Downvote)</p>
                    </div>
                    <div class="vote-buttons">
                        <button class="upvote-button" @onclick="() => UpvoteTråd(tråd.TrådeId)">Upvote Post</button>
                        <button class="downvote-button" @onclick="() => DownvoteTråd(tråd.TrådeId)">Downvote Post</button>
                    </div>
                    @foreach (var kommentar in tråd.Kommentare)
                    {
                        <div class="comment-card">
                            <p><strong>Tekst:</strong> @kommentar.Tekst</p>
                            <p><strong>Kommentarens Brugernavn:</strong> @kommentar.Bruger.Brugernavn</p>
                            <p><strong>Dato:</strong> @kommentar.Dato</p>
                            <p><strong>Kommentar Votes:</strong> @(kommentar.Upvote - kommentar.Downvote)</p>
                            <div class="vote-buttons">
                                <button class="upvote-button" @onclick="() => UpvoteKommentar(tråd.TrådeId, kommentar.KommentarId)">Upvote Kommentar</button>
                                <button class="downvote-button" @onclick="() => DownvoteKommentar(tråd.TrådeId, kommentar.KommentarId)">Downvote Kommentar</button>
                            </div>
                        </div>
                    }
                    <hr>
                </li>
            }
        }
        else
        {
            <p>Loading data...</p>
        }
    </ul>

    <section class="comment-creation">
        <h3>Skriv en kommentar her!</h3>
        <!-- Post kommentar Form -->
        <EditForm Model="newKommentar" OnValidSubmit="HandleValidSubmitKommentar">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="Tekst">Tekst</label>
                <InputText id="Tekst" @bind-Value="newKommentar.Tekst" class="form-control" />
            </div>

            <div class="form-group">
                <label for="Brugernavn">Forfatternavn</label>
                <InputText id="Brugernavn" @bind-Value="newKommentar.Bruger.Brugernavn" class="form-control" />
            </div>

            <div class="form-group">
                <label for="TrådeId">Hvilken tråd id vil du kommentere?</label>
                <InputNumber id="TrådId" @bind-Value="TrådId" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Opret Kommentar</button>
        </EditForm>
    </section>
</body>

@code {
    private Tråde[]? trådes;
    private Tråde newTråd = new Tråde();
    // Laver en tom/default bruger
    private Kommentar newKommentar = new Kommentar("", new Bruger(""));
    // For at sende et id når man bruger metoden "PostKommentarsAsync()" fra service kræver det et TrådId men datamodellen Kommentar har den ikke
    // Derfor laver vi en midlertidlig variabel der kan sende et id med når vi bruger metoden oppe i editform
    private int TrådId = 0;

    private string? errorMessage;

    [Inject]
    private HttpClient? Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            trådes = await ApiService.GetTrådesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Kan ikke hente data:" + ex.Message;
            Console.WriteLine(ex);
        }
        StateHasChanged();
    }
    //HandleValidSumbit Tråd
    public async Task HandleValidSubmitTråd()
    {
        try
        {
            var createdTråd = await ApiService.PostTrådeAsync(newTråd);
            // visker editformen ren
            newTråd = new Tråde();
            // Opdater Listen med den tråd man lige har lavet ved at kalde på Get metoden igen
            trådes = await ApiService.GetTrådesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Fejl ved oprettelse af tråd:" + ex.Message;
            Console.WriteLine(ex);
        }
    }
    //HandleValidSumbit Kommentar
    public async Task HandleValidSubmitKommentar()
    {
        try
        {
            var createdKommentar = await ApiService.PostKommentarsAsync(newKommentar, TrådId);
            // visker editformen ren
            // Laver en default/tom instans af Bruger når man har skrevet en kommentar
            newKommentar = new Kommentar("", new Bruger(newKommentar.Bruger.Brugernavn));
            // Opdater Listen med den tråd man lige har lavet ved at kalde på Get metoden igen
            trådes = await ApiService.GetTrådesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Fejl ved oprettelse af tråd:" + ex.Message;
            Console.WriteLine(ex);
        }
    }

    // metoder der bliver kaldt når man trykker på downvote eller upvote knapperne på Tråde
    private async Task UpvoteTråd(int id)
    {
        await ApiService.PutUpvoteTrådAsync(id);
        trådes = await ApiService.GetTrådesAsync();
        StateHasChanged();
    }

    private async Task DownvoteTråd(int id)
    {
        await ApiService.PutDownvoteTrådAsync(id);
        trådes = await ApiService.GetTrådesAsync();
        StateHasChanged();
    }


    // metoder der bliver kaldt når man trykker på downvote eller upvote knapperne på comments
    private async Task UpvoteKommentar(int idT, int idK)
    {
        await ApiService.UpvoteKommentarAsync(idT, idK);
        trådes = await ApiService.GetTrådesAsync();
        StateHasChanged();
    }

    private async Task DownvoteKommentar(int idT, int idK)
    {
        await  ApiService.DownvoteKommentarAsync(idT, idK);
        trådes = await ApiService.GetTrådesAsync();
        StateHasChanged();
    }
    
}
